<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="amqplib_generator" #>

<# amqp amqp = Program.LoadAMQPTypes(); #>

#include "amqpvalue.h"
#include "amqp_definitions.h"
#include <stdlib.h>

<#	foreach (section section in amqp.Items.Where(item => item is section)) #>
<#	{ #>
<#		List<type> types = new List<type>(); #>
<#		types.AddRange(section.Items.Where(item => item is type).Cast<type>()); #>
<#		foreach (type type in types) #>
<#		{ #>
<#			string type_name = type.name.ToLower().Replace('-', '_'); #>
<#			if (type.@class == typeClass.composite) #>
<#			{ #>
/* <#=		type.name #> */

	typedef struct <#= type_name.ToUpper() #>_INSTANCE_TAG
	{
		AMQP_VALUE list;
	} <#= type_name.ToUpper() #>_INSTANCE;

<#				string arg_list = Program.GetMandatoryArgList(type); #>
<#				field[] mandatory_args = Program.GetMandatoryArgs(type).ToArray(); #>
	<#= type_name.ToUpper() #>_HANDLE <#= type_name #>_create(<#= arg_list #>)
	{
		<#= type_name.ToUpper() #>_INSTANCE* <#= type_name #>_instance = (<#= type_name.ToUpper() #>_INSTANCE*)malloc(sizeof(<#= type_name.ToUpper() #>_INSTANCE));
		if (<#= type_name #>_instance != NULL)
		{
			<#= type_name #>_instance->list = amqpvalue_create_list(<#= mandatory_args.Count() #>);
			if (<#= type_name #>_instance->list == NULL)
			{
				free(<#= type_name #>_instance);
				<#= type_name #>_instance = NULL;
			}
<#				if (mandatory_args.Count() > 0) #>
<#				{ #>
			else
			{
<#					for (int i = 0; i < mandatory_args.Count(); i++) #>
<#					{ #>
<#						string mandatory_arg_name = mandatory_args[i].name.ToLower().Replace('-', '_').Replace(':', '_'); #>
				AMQP_VALUE <#= mandatory_arg_name #>_value;
<#					} #>
				int result = 0;

<#					for (int i = 0; i < mandatory_args.Count(); i++) #>
<#					{ #>
<#						string mandatory_arg_type = Program.GetCType(mandatory_args[i].type.ToLower()).Replace('-', '_').Replace(':', '_'); #>
<#						string mandatory_arg_name = mandatory_args[i].name.ToLower().Replace('-', '_').Replace(':', '_'); #>
				<#= mandatory_arg_name #>_value = amqpvalue_create_<#= mandatory_args[i].type.ToLower().Replace('-', '_').Replace(':', '_') #>(<#= mandatory_args[i].name.ToLower().Replace('-', '_').Replace(':', '_') #>);
				if ((result == 0) && (amqpvalue_set_list_item(<#= type_name #>_instance->list, <#= i #>, <#= mandatory_arg_name #>_value) != 0))
				{
					result = __LINE__;
				}
<#					} #>

<#					for (int i = 0; i < mandatory_args.Count(); i++) #>
<#					{ #>
<#						string mandatory_arg_name = mandatory_args[i].name.ToLower().Replace('-', '_').Replace(':', '_'); #>
				amqpvalue_destroy(<#= mandatory_arg_name #>_value);
<#					} #>
			}
<#				} #>
		}

		return <#= type_name #>_instance;
	}

	void <#= type_name #>_destroy(<#= type_name.ToUpper() #>_HANDLE <#= type_name #>)
	{
		if (<#= type_name #> != NULL)
		{
			<#= type_name.ToUpper() #>_INSTANCE* <#= type_name #>_instance = (<#= type_name.ToUpper() #>_INSTANCE*)<#= type_name #>;
			amqpvalue_destroy(<#= type_name #>_instance->list);
		}
	}

<#				foreach (field field in type.Items.Where(item => item is field)) #>
<#				{ #>
<#					string field_name = field.name.ToLower().Replace('-', '_'); #>
<#					string c_type = Program.GetCType(field.type).Replace('-', '_').Replace(':', '_'); #>
<#					type field_type = Program.GetTypeByName(types, field.type); #>
<#					if ((field_type != null) && (field_type.@class == typeClass.composite)) c_type = field_type.name.ToUpper().Replace('-', '_').Replace(':', '_') + "_HANDLE"; #>
	int <#= type_name #>_get_<#= field_name #>(<#= type_name.ToUpper() #>_HANDLE <#= type_name #>, <#= c_type #>* <#= field_name #>)
	{
		return __LINE__;
	}

	int <#= type_name #>_set_<#= field_name #>(<#= type_name.ToUpper() #>_HANDLE <#= type_name #>, <#= c_type #> <#= field_name #>)
	{
		return __LINE__;
	}

<#				} #>

<#			} #>
<#		} #>
<#	} #>
