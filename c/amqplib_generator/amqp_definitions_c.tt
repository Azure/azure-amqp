<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="amqplib_generator" #>

<# amqp amqp = Program.LoadAMQPTypes(); #>

#include <stdlib.h>
#ifdef _CRTDBG_MAP_ALLOC
#include <crtdbg.h>
#endif
#include "amqpvalue.h"
#include "amqp_definitions.h"
#include "amqpalloc.h"
#include <stdlib.h>
#include <stdbool.h>

<#	foreach (section section in amqp.Items.Where(item => item is section)) #>
<#	{ #>
<#		List<type> types = new List<type>(); #>
<#		types.AddRange(section.Items.Where(item => item is type).Cast<type>()); #>
<#		foreach (type type in types) #>
<#		{ #>
<#			string type_name = type.name.ToLower().Replace('-', '_'); #>
<#			if (type.@class == typeClass.composite) #>
<#			{ #>
<#				var descriptor = type.Items.Where(item => item is descriptor).First() as descriptor; #>
/* <#=		type.name #> */

	typedef struct <#= type_name.ToUpper() #>_INSTANCE_TAG
	{
		AMQP_VALUE composite_value;
	} <#= type_name.ToUpper() #>_INSTANCE;

<#				string arg_list = Program.GetMandatoryArgList(type); #>
<#				KeyValuePair<field, int>[] mandatory_args = Program.GetMandatoryArgs(type).ToArray(); #>
	static <#= type_name.ToUpper() #>_HANDLE <#= type_name #>_create_internal(void)
	{
		<#= type_name.ToUpper() #>_INSTANCE* <#= type_name #>_instance = (<#= type_name.ToUpper() #>_INSTANCE*)amqpalloc_malloc(sizeof(<#= type_name.ToUpper() #>_INSTANCE));
		if (<#= type_name #>_instance != NULL)
		{
			<#= type_name #>_instance->composite_value = NULL;
		}

		return <#= type_name #>_instance;
	}

	<#= type_name.ToUpper() #>_HANDLE <#= type_name #>_create(<#= arg_list #>)
	{
		<#= type_name.ToUpper() #>_INSTANCE* <#= type_name #>_instance = (<#= type_name.ToUpper() #>_INSTANCE*)amqpalloc_malloc(sizeof(<#= type_name.ToUpper() #>_INSTANCE));
		if (<#= type_name #>_instance != NULL)
		{
			<#= type_name #>_instance->composite_value = amqpvalue_create_composite_with_ulong_descriptor(<#= Program.GetDescriptorCode(Program.GetDescriptor(type)) #>);
			if (<#= type_name #>_instance->composite_value == NULL)
			{
				amqpalloc_free(<#= type_name #>_instance);
				<#= type_name #>_instance = NULL;
			}
<#				if (mandatory_args.Count() > 0) #>
<#				{ #>
			else
			{
<#					for (int i = 0; i < mandatory_args.Count(); i++) #>
<#					{ #>
<#						string mandatory_arg_name = mandatory_args[i].Key.name.ToLower().Replace('-', '_').Replace(':', '_'); #>
				AMQP_VALUE <#= mandatory_arg_name #>_amqp_value;
<#					} #>
				int result = 0;

<#					for (int i = 0; i < mandatory_args.Count(); i++) #>
<#					{ #>
<#						string mandatory_arg_type = Program.GetCType(mandatory_args[i].Key.type.ToLower()).Replace('-', '_').Replace(':', '_'); #>
<#						string mandatory_arg_name = mandatory_args[i].Key.name.ToLower().Replace('-', '_').Replace(':', '_'); #>
				<#= mandatory_arg_name #>_amqp_value = amqpvalue_create_<#= mandatory_args[i].Key.type.ToLower().Replace('-', '_').Replace(':', '_') #>(<#= mandatory_args[i].Key.name.ToLower().Replace('-', '_').Replace(':', '_') #>_value);
				if ((result == 0) && (amqpvalue_set_composite_item(<#= type_name #>_instance->composite_value, <#= mandatory_args[i].Value #>, <#= mandatory_arg_name #>_amqp_value) != 0))
				{
					result = __LINE__;
				}
<#					} #>

<#					for (int i = 0; i < mandatory_args.Count(); i++) #>
<#					{ #>
<#						string mandatory_arg_name = mandatory_args[i].Key.name.ToLower().Replace('-', '_').Replace(':', '_'); #>
				amqpvalue_destroy(<#= mandatory_arg_name #>_amqp_value);
<#					} #>
			}
<#				} #>
		}

		return <#= type_name #>_instance;
	}

	void <#= type_name #>_destroy(<#= type_name.ToUpper() #>_HANDLE <#= type_name #>)
	{
		if (<#= type_name #> != NULL)
		{
			<#= type_name.ToUpper() #>_INSTANCE* <#= type_name #>_instance = (<#= type_name.ToUpper() #>_INSTANCE*)<#= type_name #>;
			amqpvalue_destroy(<#= type_name #>_instance->composite_value);
			amqpalloc_free(<#= type_name #>_instance);
		}
	}

	AMQP_VALUE amqpvalue_create_<#= type_name #>(<#= type_name.ToUpper() #>_HANDLE <#= type_name #>)
	{
		AMQP_VALUE result;

		if (<#= type_name #> == NULL)
		{
			result = NULL;
		}
		else
		{
			<#= type_name.ToUpper() #>_INSTANCE* <#= type_name #>_instance = (<#= type_name.ToUpper() #>_INSTANCE*)<#= type_name #>;
			result = amqpvalue_clone(<#= type_name #>_instance->composite_value);
		}

		return result;
	}

	bool is_<#= type_name #>_type_by_descriptor(AMQP_VALUE descriptor)
	{
		bool result;

		uint64_t descriptor_ulong;
		if ((amqpvalue_get_ulong(descriptor, &descriptor_ulong) == 0) &&
			(descriptor_ulong == <#= Program.GetDescriptorCode(descriptor).ToString() #>))
		{
			result = true;
		}
		else
		{
			result = false;
		}

		return result;
	}


	int amqpvalue_get_<#= type_name #>(AMQP_VALUE value, <#= type_name.ToUpper() #>_HANDLE* <#= type_name.ToLower() #>_handle)
	{
		int result;
		<#= type_name.ToUpper() #>_INSTANCE* <#= type_name.ToLower() #>_instance = (<#= type_name.ToUpper() #>_INSTANCE*)<#= type_name #>_create_internal();
		*<#= type_name.ToLower() #>_handle = <#= type_name.ToLower() #>_instance;
		if (*<#= type_name.ToLower() #>_handle != NULL)
		{
			AMQP_VALUE list_value = amqpvalue_get_described_value(value);
			if (list_value == NULL)
			{
				<#= type_name #>_destroy(*<#= type_name.ToLower() #>_handle);
				result = __LINE__;
			}
			else
			{
				AMQP_VALUE item_value;
				do
				{
<#				int k = 0; #>
<#				foreach (field field in type.Items.Where(item => item is field)) #>
<#				{ #>
<#					string field_name = field.name.ToLower().Replace('-', '_'); #>
<#					string c_type = Program.GetCType(field.type).Replace('-', '_').Replace(':', '_'); #>
<#					type field_type = Program.GetTypeByName(types, field.type); #>
<#					if ((field_type != null) && (field_type.@class == typeClass.composite)) c_type = field_type.name.ToUpper().Replace('-', '_').Replace(':', '_') + "_HANDLE"; #>
					/* <#= field.name #> */
					item_value = amqpvalue_get_list_item(list_value, <#= k #>);
					if (item_value == NULL)
					{
<# 					if (field.mandatory == "true") #>
<# 					{ #>
						{
							<#= type_name #>_destroy(*<#= type_name.ToLower() #>_handle);
							result = __LINE__;
							break;
						}
<# 					} #>
<# 					else #>
<# 					{ #>
						/* do nothing */
<# 					} #>
					}
					else
					{
<# if (field.type != "*") #>
<# { #>
						<#= c_type #> <#= field_name #>;
						if (amqpvalue_get_<#= field.type.ToLower().Replace('-', '_').Replace(':', '_') #>(item_value, &<#= field_name #>) != 0)
						{
<# 					if (field.mandatory == "true") #>
<# 					{ #>
							<#= type_name #>_destroy(*<#= type_name.ToLower() #>_handle);
							result = __LINE__;
							break;
<# 					} #>
<# 					else #>
<# 					{ #>
							if (amqpvalue_get_type(item_value) != AMQP_TYPE_NULL)
							{
								<#= type_name #>_destroy(*<#= type_name.ToLower() #>_handle);
								result = __LINE__;
								break;
							}
<# 					} #>
						}

						amqpvalue_destroy(item_value);
<# } #>
<# else #>
<# { #>
<# } #>
					}
<#					k++; #>
<#				} #>

					<#= type_name.ToLower() #>_instance->composite_value = amqpvalue_clone(value);

					result = 0;
				} while (0);
			}
		}

		return result;
	}

<#				int j = 0; #>
<#				foreach (field field in type.Items.Where(item => item is field)) #>
<#				{ #>
<#					string field_name = field.name.ToLower().Replace('-', '_'); #>
<#					string c_type = Program.GetCType(field.type).Replace('-', '_').Replace(':', '_'); #>
<#					type field_type = Program.GetTypeByName(types, field.type); #>
<#					if ((field_type != null) && (field_type.@class == typeClass.composite)) c_type = field_type.name.ToUpper().Replace('-', '_').Replace(':', '_') + "_HANDLE"; #>
	int <#= type_name #>_get_<#= field_name #>(<#= type_name.ToUpper() #>_HANDLE <#= type_name #>, <#= c_type #>* <#= field_name #>_value)
	{
		int result;

		if (<#= type_name #> == NULL)
		{
			result = __LINE__;
		}
		else
		{
			<#= type_name.ToUpper() #>_INSTANCE* <#= type_name #>_instance = (<#= type_name.ToUpper() #>_INSTANCE*)<#= type_name #>;
			AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(<#= type_name #>_instance->composite_value, <#= j #>);
			if (item_value == NULL)
			{
				result = __LINE__;
			}
			else
			{
<#						if (field.type.Replace('-', '_').Replace(':', '_') == "*") #>
<#						{ #>
				*<#= field_name #>_value = item_value;
<#						} #>
<#						else #>
<#						{ #>
				if (amqpvalue_get_<#= field.type.Replace('-', '_').Replace(':', '_') #>(item_value, <#= field_name #>_value) != 0)
				{
					result = __LINE__;
				}
				else
				{
					result = 0;
				}
<#						} #>
			}
		}

		return result;
	}

	int <#= type_name #>_set_<#= field_name #>(<#= type_name.ToUpper() #>_HANDLE <#= type_name #>, <#= c_type #> <#= field_name #>_value)
	{
		int result;

		if (<#= type_name #> == NULL)
		{
			result = __LINE__;
		}
		else
		{
			<#= type_name.ToUpper() #>_INSTANCE* <#= type_name #>_instance = (<#= type_name.ToUpper() #>_INSTANCE*)<#= type_name #>;
<# if (c_type != "AMQP_VALUE") #>
<# { #>
			AMQP_VALUE <#= field_name #>_amqp_value = amqpvalue_create_<#= field.type.ToLower().Replace('-', '_').Replace(':', '_') #>(<#= field_name #>_value);
<# } #>
<# else #>
<# { #>
			AMQP_VALUE <#= field_name #>_amqp_value = amqpvalue_clone(<#= field_name #>_value);
<# } #>
			if (<#= field_name #>_amqp_value == NULL)
			{
				result = __LINE__;
			}
			else
			{
				if (amqpvalue_set_composite_item(<#= type_name #>_instance->composite_value, <#= j #>, <#= field_name #>_amqp_value) != 0)
				{
					result = __LINE__;
				}
				else
				{
					result = 0;
				}

				amqpvalue_destroy(<#= field_name #>_amqp_value);
			}
		}

		return result;
	}

<#					j++; #>
<#				} #>

<#			} #>
<#		} #>
<#	} #>
